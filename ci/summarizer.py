#!/bin/env python

from sys import argv
from sys import exit
from collections import Counter

'''
Naive parser and pretty printer for the MISRA reports by cppcheck
'''

script, reportfile = argv
def analyze():
    '''
    A really dumb parser for the pre-processed report generated by cppcheck
    '''
    errorsMap = {} # keys: filenames, values: list of tuples containing rule violated and line
    file = open(reportfile, 'r')
    fileLines = file.readlines()
    cppcheckNumOfErrors = len(fileLines) # number of errors in the original report (most of these are duplicates)
    linesSeen = set() # contains the unique lines from the file
    
    if len(fileLines) == 0:
        print("\033[1m\033[92mStatic analysis for MISRA compliance complete. No errors found.")
        return 0
    else:
        for line in fileLines:  # remove duplicate lines
            if line not in linesSeen:
                linesSeen.add(line)
            
        for line in linesSeen: # after cleaning up the duplicates, split the line into parts
            lineContents = line.split(':')
            fileName = lineContents[0] # first part is the filename (index 0)
            error = (lineContents[1], lineContents[2].strip('\n')) # index 1: line number, index 2: number of violated rule

            if fileName not in errorsMap.keys():
                errorsMap[fileName] = list()  # create a new list for the new filename and append the tuple in it
                errorsMap[fileName].append(error)
            else:
                errorsMap[fileName].append(error) # do not append if it already exists
            
        return errorsMap # return the completed error dictionary


def prettyprint(errors):
    '''
    Prettyprints the contents of the error dictionary with colors and stuff
    '''
    print("\033[1m\033[91m=================================================\n")
    print("\033[1m       Static analysis results: Error Summary        \n")
    for key in errors:
        for error in errors[key]:
            print("\033[1mFile \033[93m{0}\033[91m violates rule \033[93m#{1}\033[91m of the MISRA C 2012 standard at line \033[93m{2}\033[91m".format(key, error[1], error[0]))
    print("\033[1m=================================================\033[0m\n")


def run():
    errors = analyze()
    if isinstance(errors, dict):
        prettyprint(errors)
        exit(127)
    elif isinstance(errors, int) and errors == 0:
        exit(0)


if __name__ == "__main__":
    run()
