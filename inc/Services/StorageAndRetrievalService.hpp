#ifndef ECSS_SERVICES_STORAGEANDRETRIEVALSERVICE_HPP
#define ECSS_SERVICES_STORAGEANDRETRIEVALSERVICE_HPP

#include "ECSS_Definitions.hpp"
#include "Service.hpp"
#include "ErrorHandler.hpp"
#include "PacketStore.hpp"
#include "StorageAndRetrievalConfigurations/ApplicationProcessConfiguration.hpp"
#include "StorageAndRetrievalConfigurations/HousekeepingReportConfiguration.hpp"
#include "StorageAndRetrievalConfigurations/EventReportBlockingConfiguration.hpp"
#include "etl/map.h"

/**
 * Implementation of ST[15] Storage and Retrieval Service, as defined in ECSS-E-ST-70-41C.
 *
 * @brief This Service:
 * 1) provides the capability to select reports generated by other services and store them into packet stores.
 * 2) allows the ground system to manage the reports in the packet stores and request their downlink.
 *
 * @author Konstantinos Petridis <petridkon@gmail.com>
 */
class StorageAndRetrievalService : public Service {
public:

	inline static const uint8_t ServiceType = 15;

	enum MessageType : uint8_t {
		EnableStorageFunction = 1,
		DisableStorageFunction = 2,
		AddReportTypesToAppProcessConfiguration = 3,
		DeleteReportTypesFromAppProcessConfiguration = 4,
		ReportAppConfigurationContent = 5,
		AppConfigurationContentReport = 6,
		StartByTimeRangeRetrieval = 9,
		DeletePacketStoreContent = 11,
		ReportContentSummaryOfPacketStores = 12,
		PacketStoreContentSummaryReport = 13,
		ChangeOpenRetrievalStartTimeTag = 14,
		ResumeOpenRetrievalOfPacketStores = 15,
		SuspendOpenRetrievalOfPacketStores = 16,
		AbortByTimeRangeRetrieval = 17,
		ReportStatusOfPacketStores = 18,
		PacketStoresStatusReport = 19,
		CreatePacketStores = 20,
		DeletePacketStores = 21,
		ReportConfigurationOfPacketStores = 22,
		PacketStoreConfigurationReport = 23,
		CopyPacketsInTimeWindow = 24,
		ResizePacketStores = 25,
		ChangeTypeToCircular = 26,
		ChangeTypeToBounded = 27,
		ChangeVirtualChannel = 28,

	};

	enum VirtualChannels : uint8_t {

	};

	enum TimeStamping {
	    StorageBased = 0,
		PacketBased = 1
	};

	static const uint16_t maxPacketStores = 20;

	etl::map <uint16_t, PacketStore, maxPacketStores> packetStores;

	const bool supportsCircularType = true;
	const bool supportsBoundedType = true;

	/**
	* @brief Support for the capability to handle multiple retrieval requests in parallel as per 6.15.3.1(i)
 	*/
	const bool supportsConcurrentRetrievalRequests = false;

	/**
	* @brief Support for the capability to queue requests pending their execution as per 6.15.3.1(k)
	*/
	const bool supportsQueuingRetrievalRequests = true;

	/**
	* @brief Support for the capability to prioritize packet retrieval as per 6.15.3.1(m)
	*/
	const bool supportsPrioritizingRetrievals = true;
	const TimeStamping timeStamping = PacketBased;

	/**
	* TC[15,1] request to enable the packet stores' storage function
	*/
	void enableStorageFunction(Message& request);

	/**
	* TC[15,2] request to disable the packet stores' storage function
	*/
	void disableStorageFunction(Message& request);

	/**
	* TC[15,14] change the open retrieval start time tag
	*/
	void changeOpenRetrievalStartTimeTag(Message& request);

	/**
	* TC[15,15] resume the open retrieval of packet stores
	*/
    void resumeOpenRetrievalOfPacketStores(Message& request);

  	/**
	* TC[15,16] suspend the open retrieval of packet stores
	*/
    void suspendOpenRetrievalOfPacketStores(Message& request);

	/**
	* TC[15,9] start the by-time-range retrieval of packet stores
	*/
	void startByTimeRangeRetrieval(Message& request);

	/**
	* TC[15,17] abort the by-time-range retrieval of packet stores
	*/
	void abortByTimeRangeRetrieval(Message& request);

	/**
	* This function takes a TC[15,18] 'report the status of packet stores' request as argument and responds with a
	* TM[15,19] 'packet stores status' report message.
	*/
	void packetStoresStatusReport(Message& request);

	/**
	* TC[15,11] delete the packet store content up to the specified time
	*/
	void deletePacketStoreContent(Message& request);

	/**
	* TC[15,20] create packet stores
	*/
	void createPacketStores(Message& request);

	/**
	 * TC[15,21] delete packet stores
	 */
	void deletePacketStores(Message& request);

	/**
	 * This function takes a TC[15,22] 'report the packet store configuration' as argument and responds with a TM[15,
	 * 23] 'packet store configuration report' report message.
	 */
	void packetStoreConfigurationReport(Message& request);

	/**
	 * TC[15,24] copy the packets contained into a packet store, selected by the time window
	 */
	void copyPacketsInTimeWindow(Message& request);

	/**
	 * TC[15,25] resize packet stores
	 */
	void resizePacketStores(Message& request);

	/**
	 * TC[15,26] change the packet store type to circular
	 */
	void changeTypeToCircular(Message& request);

	/**
	 * TC[15,27] change the packet store type to bounded
	 */
	void changeTypeToBounded(Message& request);

	/**
	 * TC[15,28] change the virtual channel used by a packet store
	 */
	void changeVirtualChannel(Message& request);

	/**
	 * This function takes a TC[15,12] 'report the packet store content summary' as argument and responds with a TM[15,
	 * 13] 'packet store content summary report' report message.
	 */
	void packetStoreContentSummaryReport(Message& request);

	/**
	 * Packet Selection Subservice
	 *
	 * This subservice is meant for controlling the storage of reports generated by the application process hosting
	 * that subservice.
	 */
	class PacketSelectionSubservice {
	private:
		StorageAndRetrievalService& mainService;
	public:
		explicit PacketSelectionSubservice(StorageAndRetrievalService& parent,
		                                   uint16_t numOfControlledAppProcs,
		                                   uint16_t maxEventDefIds,
		                                   uint16_t maxHousekeepingStructIds,
		                                   uint16_t maxReportTypeDefs,
		                                   uint16_t maxServiceTypeDefs);

		const bool supportsStorageControlOfHousekeepingReports = true;
		const bool supportsStorageControlOfEventReports = true;

		etl::vector <uint16_t, ECSS_MAX_CONTROLLED_APPLICATION_PROCESSES> controlledAppProcesses;

		const uint16_t numOfControlledAppProcesses;
		const uint16_t maxServiceTypeDefinitions;     //Per Application Process Definition
		const uint16_t maxReportTypeDefinitions;      //This is per Service Type Definition
		const uint16_t maxHousekeepingStructureIds;   //Per Housekeeping storage-control definition
		const uint16_t maxEventDefinitionIds;         //Per Event-Report storage-control definition

		ApplicationProcessConfiguration applicationProcessConfiguration;
		HousekeepingReportConfiguration housekeepingReportConfiguration;

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the requested application process id is controlled by the packet selection subservice.
		 */
		bool appIsControlled(uint16_t applicationId, Message& request);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the maximum number of report type definitions are reached, in order to decide whether to put a new
		 * report type definition.
		 */
		bool exceedsMaxReportDefinitions(uint16_t packetStoreId,
		                                 uint16_t applicationId,
		                                 uint16_t serviceId,
		                                 Message&request);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the maximum number of service type definitions are reached, in order to decide whether to put a
		 * new service type definition.
		 */
		bool exceedsMaxServiceDefinitions(uint16_t packetStoreId, uint16_t applicationId, Message& request);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if there are no report definitions inside a service type definition, so it decides whether to put a
		 * new report type definition.
		 */
		bool noReportDefinitionInService(uint16_t packetStoreId,
		                                 uint16_t applicationId,
		                                 uint16_t serviceId,
		                                 Message& request);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if there are no service type definitions inside an application definition, so it decides whether to
		 * put a new report type definition.
		 */
		bool noServiceDefinitionInApplication(uint16_t packetStoreId, uint16_t applicationId, Message& request);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the requested application ID already exists in the definition, to decide whether to add it or not.
		 */
		bool appExistsInDefinition(uint16_t packetStoreId, uint16_t applicationId);

		/**
		 *
		 * Creates an application definition and adds it to the application process storage control configuration.
		 * Only use if the specified App Id does not exist already.
		 */
		void createAppDefinition(uint16_t packetStoreId, uint16_t applicationId);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the requested service type already exists in the application, to decide whether to add it or not.
		 */
		bool serviceExistsInApp(uint16_t packetStoreId, uint16_t applicationId, uint16_t serviceId);

		/**
		 * Creates a service type definition and adds it to the specified application definition. Only use if the
		 * specified service type definition does not exist already.
		 */
		void createServiceDefinition(uint16_t packetStoreId, uint16_t applicationId, uint16_t serviceId);

		/**
		 * Helper function to make multiple checking inside other functions more clear and easy to read. It basically
		 * checks if the requested report type already exists in the service type, to decide whether to add it or not.
		 */
		bool reportExistsInService(uint16_t packetStoreId,
		                           uint16_t applicationId,
		                           uint16_t serviceId,
		                           uint16_t reportId,
		                           uint16_t &index);

		/**
		 * Creates a report type definition and adds it to the specified service definition. Only use if the
		 * specified report type definition does not exist already.
		 */
		void createReportDefinition(uint16_t packetStoreId,
		                            uint16_t applicationId,
		                            uint16_t serviceId,
		                            uint16_t reportId);

		/**
		 * Deletes all report type definitions of a specified service type definition.
		 */
		void deleteReportDefinitionsOfService(uint16_t packetStoreId,
		                                      uint16_t applicationId,
		                                      uint16_t serviceId,
		                                      bool deleteAll,
		                                      uint16_t index);

		/**
		 * Checks if there are any report definitions in the specified service type and application process.
		 */
		bool serviceHasReportDefinitions(uint16_t packetStoreId, uint16_t applicationId, uint16_t serviceId);

		/**
		 * Checks if there are any service definitions in the specified application process
		 */
		bool appHasServiceDefinitions(uint16_t packetStoreId, uint16_t applicationId);

		/**
		 * Deletes all service type definitions of a specified application process
		 */
		void deleteServiceDefinitionsOfApp(uint16_t packetStoreId,
		                                   uint16_t applicationId,
		                                   bool deleteAll,
		                                   uint16_t serviceId);

		/**
		 * TC[15,3] add report types to an application process storage control configuration
		 */
		void addReportTypesToAppProcessConfiguration(Message& request);

		/**
		 * TC[15,4] delete report types from an application process storage control configuration
		 */
		void deleteReportTypesFromAppProcessConfiguration(Message& request);

		/**
		 * This message takes a TC[15,5] 'report the application process storage control configuration content' request
		 * as argument, and responds with a TM[15,6] 'application process storage control configuration content report'
		 * message.
		 */
		void appConfigurationContentReport(Message& request);

	} packetSelectionSubservice;

};

#endif