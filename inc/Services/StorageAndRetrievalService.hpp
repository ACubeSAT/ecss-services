#ifndef ECSS_SERVICES_STORAGEANDRETRIEVALSERVICE_HPP
#define ECSS_SERVICES_STORAGEANDRETRIEVALSERVICE_HPP

#include "ECSS_Definitions.hpp"
#include "Service.hpp"
#include "ErrorHandler.hpp"
#include "PacketStore.hpp"
#include "StorageAndRetrievalConfigurations/ApplicationProcessConfiguration.hpp"
#include "StorageAndRetrievalConfigurations/HousekeepingReportConfiguration.hpp"
#include "StorageAndRetrievalConfigurations/EventReportBlockingConfiguration.hpp"
#include "etl/map.h"

/**
 * Implementation of ST[15] Storage and Retrieval Service, as defined in ECSS-E-ST-70-41C.
 *
 * @brief This Service:
 * 1) provides the capability to select reports generated by other services and store them into packet stores.
 * 2) allows the ground system to manage the reports in the packet stores and request their downlink.
 *
 * @author Konstantinos Petridis <petridkon@gmail.com>
 */
class StorageAndRetrievalService : public Service {
public:
	inline static const uint8_t ServiceType = 15;

	enum MessageType : uint8_t {
		EnableStorageFunction = 1,
		DisableStorageFunction = 2,
		AddReportTypesToAppProcessConfiguration = 3,
		DeleteReportTypesFromAppProcessConfiguration = 4,
		ReportAppConfigurationContent = 5,
		AppConfigurationContentReport = 6,
		StartByTimeRangeRetrieval = 9,
		DeletePacketStoreContent = 11,
		ReportContentSummaryOfPacketStores = 12,
		PacketStoreContentSummaryReport = 13,
		ChangeOpenRetrievalStartTimeTag = 14,
		ResumeOpenRetrievalOfPacketStores = 15,
		SuspendOpenRetrievalOfPacketStores = 16,
		AbortByTimeRangeRetrieval = 17,
		ReportStatusOfPacketStores = 18,
		PacketStoresStatusReport = 19,
		CreatePacketStores = 20,
		DeletePacketStores = 21,
		ReportConfigurationOfPacketStores = 22,
		PacketStoreConfigurationReport = 23,
		CopyPacketsInTimeWindow = 24,
		ResizePacketStores = 25,
		ChangeTypeToCircular = 26,
		ChangeTypeToBounded = 27,
		ChangeVirtualChannel = 28,
		AddStructuresToHousekeepingConfiguration = 29,
		DeleteStructuresFromHousekeepingConfiguration = 30,
		DeleteEventDefinitionsFromEventReportConfiguration = 33,
		AddEventDefinitionsToEventReportConfiguration = 34,
		ReportHousekeepingConfigurationContent = 35,
		HousekeepingConfigurationContentReport = 36,
		ReportEventConfigurationContent = 39,
		EventConfigurationContentReport = 40
	};

	StorageAndRetrievalService();

	typedef String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreKey;
	etl::map<packetStoreKey, PacketStore, ECSS_MAX_PACKET_STORES> packetStores;

	/**
	 * Packet Selection Subservice
	 */
	class PacketSelectionSubservice {
	private:
		StorageAndRetrievalService& mainService;

		/**
		 * Reads a packet store ID from a message.
		 */
		static String<ECSS_MAX_PACKET_STORE_ID_SIZE> readPacketStoreId(Message& request);

		/**
		 * Checks if the specified packet store exists in the packet selection sub-service.
		 */
		bool packetStoreExists(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId);

		/**
		 * checks if the requested application process id is controlled by the packet selection subservice.
		 */
		bool appIsControlled(uint16_t applicationId, Message& request);

		/**
		 * checks if the maximum number of report type definitions are reached, in order to decide whether to put a
		 * new report type definition.
		 */
		bool exceedsMaxReportDefinitions(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                 uint16_t applicationId, uint16_t serviceId, Message& request);

		/**
		 * checks if the maximum number of service type definitions is reached, in order to decide whether to put a
		 * new service type definition.
		 */
		bool exceedsMaxServiceDefinitions(String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                                  Message& request);

		/**
		 * Checks if there are no report definitions inside a service type definition, so it decides whether to add a
		 * new report type definition.
		 */
		bool noReportDefinitionInService(String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                                 uint16_t serviceId, Message& request);

		/**
		 * Checks if there are no service type definitions inside an application definition, so it decides whether to
		 * add a new report type definition.
		 */
		bool noServiceDefinitionInApplication(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                      uint16_t applicationId, Message& request);

		/**
		 * Adds all the report types of an application process, for a specified packet store.
		 */
		void addAllReportDefinitionsOfApplication(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                          uint16_t applicationId);

		/**
		 * Adds all the report types of a service type, for a specified packet store and application process.
		 */
		void addAllReportDefinitionsOfService(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                      uint16_t applicationId, uint16_t serviceId);

		/**
		 * Performs the necessary error checking for a specific application and decides whether the instruction to
		 * add a report type is valid or not.
		 */
		bool checkApplicationForReportTypes(String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                    uint16_t applicationId, Message& request);

		/**
		 * Performs the necessary error checking for a specific service type and decides whether the instruction to
		 * add a report type is valid or not.
		 */
		bool checkService(String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                  uint16_t serviceId, Message& request);

		/**
		 * Creates a report type definition and adds it to the specified service definition.
		 */
		void addReportDefinition(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                         uint16_t serviceId, uint16_t reportId);

		/**
		 * checks if the requested report type already exists in the service type, to decide whether to add it or not.
		 * Returns the position of the 'reportId' inside the vector if it exists, and -1 if not.
		 */
		int reportExistsInService(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                          uint16_t serviceId, uint16_t reportId);

		/**
		 * Checks if the requested application ID already exists in the application process configuration, to decide
		 * whether
		 * to add it or not.
		 */
		bool appExistsInApplicationConfiguration(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                         uint16_t applicationId);

		/**
		 * Checks if the requested service type already exists in the application, to decide whether to add it or not.
		 */
		bool serviceExistsInApp(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t applicationId,
		                        uint16_t serviceId);

		/**
		 * Deletes either specified, or all report type definitions of a specified service type definition.
		 */
		void deleteReportDefinitionsOfService(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                      uint16_t applicationId, uint16_t serviceId, int index);

		/**
		 * Deletes all service type definitions of a specified application process
		 */
		void deleteServiceDefinitionsOfApp(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                   uint16_t applicationId, bool deleteAll, uint16_t serviceId);

		/**
		 * Performs the necessary error checking for a specific application and decides whether the request to add a
		 * new housekeeping structure ID is valid.
		 */
		bool checkApplicationForHousekeeping(String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                     uint16_t applicationId, Message& request);

		/**
		 * Checks if the maximum number of housekeeping structure IDs is reached, in order to decide
		 * whether to put a new housekeeping structure ID.
		 */
		bool exceedsMaxHousekeepingStructures(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                      uint16_t applicationId, Message& request);

		/**
		 * Checks if there are no housekeeping structure IDs inside an application, so it decides whether to add a
		 * new housekeeping structure ID.
		 */
		bool noStructureIdsInApplication(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                 uint16_t applicationId, Message& request);

		/**
		 * Adds a new housekeeping structure ID to the specified application. This version takes into consideration
		 * the subsampling rate and adds it to the related vector.
		 */
		void addHousekeepingStructureId(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                uint16_t applicationId, uint8_t structureId, uint16_t subsamplingRate);

		/**
		 * Adds a new housekeeping structure ID to the specified application. This version does not take into
		 * consideration the subsampling rate.
		 */
		void addHousekeepingStructureId(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                uint16_t applicationId, uint8_t structureId);

		/**
		 * Adds all the housekeeping structure IDs, for a specified packet store and a specified application.
		 */
		void addAllHousekeepingStructuresOfApplication(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                               uint16_t applicationId);

		/**
		 * Checks if the requested application ID already exists in the housekeeping configuration, to decide whether
		 * to add it or not.
		 */
		bool appExistsInHousekeepingConfiguration(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                          uint16_t applicationId);

		/**
		 *
		 */
		int structureIdExistsInApplication(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                   uint16_t applicationId, uint8_t structureId);

		/**
		 *
		 */
		void deleteHousekeepingStructure(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId,
		                                 uint16_t applicationId, uint16_t index);

	public:
		/**
		 * Constructor of the packet selection sub-service.
		 */
		explicit PacketSelectionSubservice(StorageAndRetrievalService& parent, uint16_t numOfControlledAppProcs,
		                                   uint16_t maxEventDefIds, uint16_t maxHousekeepingStructIds,
		                                   uint16_t maxReportTypeDefs, uint16_t maxServiceTypeDefs);

		/**
		 * Vector containing the IDs of the application processes controlled by the packet selection subservice.
		 */
		etl::vector<uint16_t, ECSS_MAX_CONTROLLED_APPLICATION_PROCESSES> controlledApplications;

		/**
		 * Support for storage of housekeeping reports, as per 5.15.4.2.1.a
		 */
		const bool supportsStorageControlOfHousekeepingReports = true;

		/**
		 * Support for storage of event reports, as per 5.15.4.2.1.c
		 */
		const bool supportsStorageControlOfEventReports = true;

		/**
		 * Support to subsample the storage of housekeeping reports as per 5.15.4.2.1.d
		 */
		const bool supportsSubsamplingRate;
		const uint16_t numOfControlledAppProcesses;
		const uint16_t maxServiceTypeDefinitions; // Per Application Process Definition
		const uint16_t maxReportTypeDefinitions; // This is per Service Type Definition
		const uint8_t maxHousekeepingStructureIds; // Per Housekeeping storage-control definition
		const uint16_t maxEventDefinitionIds; // Per Event-Report storage-control definition

		/**
		 * Contains the definitions that the packet selection subservice holds, regarding TM packets coming from
		 * application processes.
		 */
		ApplicationProcessConfiguration applicationProcessConfiguration;
		/**
		 * Contains the definitions that the packet selection subservice holds, regarding TM packets coming from
		 * housekeeping reports.
		 */
		HousekeepingReportConfiguration housekeepingReportConfiguration;
		/**
		 * Contains the definitions that the packet selection subservice holds, regarding TM packets coming from
		 * events.
		 */
		EventReportBlockingConfiguration eventReportConfiguration;

		//		/**
		//		 * Creates an application definition and adds it to the application process storage control
		// configuration.
		//		 * Only use if the specified App Id does not exist already.
		//		 */
		//		void createAppDefinition(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t
		// applicationId);
		//

		//		/**
		//		 * Creates a service type definition and adds it to the specified application definition. Only use if
		// the
		//		 * specified service type definition does not exist already.
		//		 */
		//		void createServiceDefinition(const String<ECSS_MAX_PACKET_STORE_ID_SIZE>& packetStoreId, uint16_t
		// applicationId, 		                             uint16_t serviceId);

		//		/**
		//		 * Checks if there are any report definitions in the specified service type and application process.
		//		 */
		//		bool serviceHasReportDefinitions(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                                 uint16_t serviceId);
		//
		//		/**
		//		 * Checks if there are any service definitions in the specified application process
		//		 */
		//		bool appHasServiceDefinitions(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId);

		//		/**
		//		 * checks if the maximum number of housekeeping structures are reached, in order to decide whether to
		// add a new
		//		 * structure.
		//		 */
		//		bool exceedsMaxStructureIds(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t applicationId,
		//		                            Message& request);
		//
		//		/**
		//		 * Checks if there are no structure Ids in the definition
		//		 */
		//		bool noStructureInDefinition(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                             Message& request);
		//
		//		/**
		//		 * Creates new Housekeeping definition
		//		 */
		//		void createHousekeepingDefinition(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId);
		//
		//		/**
		//		 * Checks if the Housekeeping Definition already exists
		//		 */
		//		bool housekeepingDefinitionExists(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId);
		//
		//		/**
		//		 * Checks if the requested structure already exists in a housekeeping definition
		//		 */
		//		bool structureExists(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t applicationId,
		//		                     uint16_t structureId, uint16_t& index);
		//
		//		/**
		//		 * Deletes either all or specified housekeeping structure ids
		//		 */
		//		void deleteStructureIds(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t applicationId,
		//		                        bool deleteAll, uint16_t index);
		//
		//		/**
		//		 * Checks if the maximum number of event definitions are reached, in order to decide whether to add a
		// new
		//		 * definition.
		//		 */
		//		bool exceedsMaxEventDefinitionIds(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                                  Message& request);
		//
		//		/**
		//		 * Checks if a event report blocking definition contains no event report definition IDs, to know whether
		// to
		//		 * abort the request to add new ones.
		//		 */
		//		bool noEventInDefinition(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t applicationId,
		//		                         Message& request);
		//
		//		/**
		//		 * Checks if a event blocking storage control definition exists for the requested packet store.
		//		 */
		//		bool eventBlockingDefinitionExists(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId);
		//
		//		/**
		//		 * Creates a new event blocking storage control definition for a given packet store id
		//		 */
		//		void createEventReportBlockingDefinition(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId,
		//		                                         uint16_t applicationId);
		//
		//		/**
		//		 * Checks if an event definition identifier exists for a specified packet store and a specified event
		// report
		//		 * blocking storage control definition.
		//		 */
		//		bool eventDefinitionIdExists(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                             uint16_t eventId, uint16_t& index);
		//
		//		/**
		//		 * Adds a new event definition identifier in a specified packet store and a specified event report
		//		 * blocking storage control definition.
		//		 */
		//		void createEventDefinitionId(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                             uint16_t eventId);
		//
		//		/**
		//		 * Deletes wither all or the specified event definition IDs from a  specified packet store and a
		// specified
		//		 * event report blocking storage control definition.
		//		 */
		//		void deleteEventDefinitionIds(String<ECSS_MAX_PACKET_STORE_ID_SIZE> packetStoreId, uint16_t
		// applicationId, 		                              bool deleteAll, uint16_t index);

		/**
		 * TC[15,3] 'add report types to an application process storage control configuration'.
		 */
		void addReportTypesToAppProcessConfiguration(Message& request);

		/**
		 * TC[15,4] 'delete report types from an application process storage control configuration'
		 */
		void deleteReportTypesFromAppProcessConfiguration(Message& request);

		/**
		 * This function takes a TC[15,5] 'report the application process storage control configuration content' request
		 * as argument, and responds with a TM[15,6] 'application process storage control configuration content report'
		 * message.
		 */
		void appConfigurationContentReport(Message& request);

		/**
		 * TC[15,29] 'add structure identifiers to the housekeeping parameter report storage control configuration'.
		 */
		void addStructuresToHousekeepingConfiguration(Message& request);

		/**
		 * TC[15,30] 'delete structure identifiers from the housekeeping parameter report storage control
		 * configuration'.
		 */
		void deleteStructuresFromHousekeepingConfiguration(Message& request);

		/**
		 * This function takes a TC[15,35] 'report the housekeeping parameter report storage control configuration
		 * content' request as argument, and responds with a TM[15,36] 'housekeeping parameter report storage control
		 * configuration content report' message.
		 */
		void housekeepingConfigurationContentReport(Message& request);

		//		/**
		//		 * TC[15,34] add event definition identifiers to the event report blocking storage-control configuration
		//		 */
		//		void addEventDefinitionsToEventReportConfiguration(Message& request);
		//
		//		/**
		//		 * TC[15,33] delete event definition identifiers from the event report blocking storage-control
		// configuration
		//		 */
		//		void deleteEventDefinitionsFromEventReportConfiguration(Message& request);
		//
		//		/**
		//		 * This function takes a TC[15,39] 'report the event report blocking storage control configuration
		//		 * content' request as argument, and responds with a TM[15,40] 'event report blocking configuration
		// content
		//		 * report' message.
		//		 */
		//		void eventConfigurationContentReport(Message& request);

	} packetSelectionSubservice;

	/**
	 * It is responsible to call the suitable function that executes a telecommand packet. The source of that packet
	 * is the ground station.
	 *
	 * @note This function is called from the main execute() that is defined in the file MessageParser.hpp
	 * @param param Contains the necessary parameters to call the suitable subservice
	 */
	void execute(Message& request);
};

#endif