#ifndef ECSS_SERVICES_TIMEMANAGEMENTSERVICE_HPP
#define ECSS_SERVICES_TIMEMANAGEMENTSERVICE_HPP

#include <Service.hpp>
#include <ctime>
#include "Helpers/TimeHelper.hpp"

/**
 * Implementation of the ST[09] time management. The current implementation sends
 * a report with the spacecraft time that is formatted according to the CUC time code format
 * (check TimeHelper for the format)
 *
 * @todo When the time comes for the application processes we should consider this: All reports
 * generated by the application process that is identified by APID 0 are time reports
 * @todo Declare the time accuracy that the standard claims in the spacecraft
 * time reference section(6.9.3.d,e)
 */
class TimeManagementService : public Service {
public:
	TimeManagementService() {
		serviceType = 9;
	}

	/**
	 * TM[9,2] CUC time report
	 *
	 * @todo check if we need spacecraft time reference status
	 * @todo ECSS standard claims: <<The time reports generated by the time reporting subservice
	 * are spacecraft time packets. A spacecraft time packet does not carry the message type,
	 * consisting of the service type and message subtype.>> Check if we need to implement that
	 * or should ignore the standard?
	 */
	void cucTimeReport();

	/**
	 * TC[9,128]
	 *
	 * This function is a custom subservice(mission specific) with message type 128(as defined
	 * from the standard for custom message types, 5.3.3.1.f) and it parses the data of the
	 * time-management telecommand packet
	 *
	 * @param messageTime The class-member `data` of /p has the data for  the time configuration
	 * (a CUC format as described in the documentation of the class TimeHelper)
	 */
	 void parseTime(Message &messageTime);
};


#endif //ECSS_SERVICES_TIMEMANAGEMENTSERVICE_HPP
